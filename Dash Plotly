# Import required libraries 
import pandas as pd
import dash
from dash import html, dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the SpaceX launch data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max() + 2000  # Added buffer for clarity
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a Dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[
    html.H1('SpaceX Launch Records Dashboard',
            style={'textAlign': 'center', 'color': '#503D36', 'font-size': 40}),

    # TASK 1: Dropdown for selecting Launch Site
    dcc.Dropdown(
        id="site-dropdown",
        options=[
            {"label": "All Sites", "value": "ALL"},
            {"label": "CCAFS LC-40", "value": "CCAFS LC-40"},
            {"label": "VAFB SLC-4E", "value": "VAFB SLC-4E"},
            {"label": "KSC LC-39A", "value": "KSC LC-39A"},
            {"label": "CCAFS SLC-40", "value": "CCAFS SLC-40"}
        ],
        value="ALL",  # Default selection
        placeholder="Select a Launch Site",
        searchable=True
    ),
    
    html.Br(),

    # TASK 2: Pie chart for successful launches
    html.Div(dcc.Graph(id='success-pie-chart')),

    # Display the total number of successful launches
    html.Div(id="total-success-count", style={'textAlign': 'center', 'fontSize': 20, 'fontWeight': 'bold'}),

    html.Br(),

    html.P("Payload range (Kg):"),

    # TASK 3: Slider for payload range
    dcc.RangeSlider(
        id="payload-slider",
        min=min_payload, max=max_payload, step=1000,
        marks={int(i): str(int(i)) for i in range(0, int(max_payload) + 2000, 2000)},
        value=[min_payload, max_payload]
    ),

    html.Br(),

    # TASK 4: Scatter plot for payload vs. launch success
    html.Div(dcc.Graph(id='success-payload-scatter-chart'))
])


# TASK 2: Callback for pie chart and success count
@app.callback(
    [Output(component_id="success-pie-chart", component_property="figure"),
     Output(component_id="total-success-count", component_property="children")],  # Added Output for total count
    [Input(component_id="site-dropdown", component_property="value"),
     Input(component_id="payload-slider", component_property="value")]
)
def get_pie_chart(entered_site, payload_range):
    # Filter data based on payload range and success class
    filtered_df = spacex_df[
        (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
        (spacex_df['Payload Mass (kg)'] <= payload_range[1]) &
        (spacex_df['class'] == 1)  # Keep only successful launches
    ]

    total_success_count = len(filtered_df)  # Count total successful launches

    if entered_site == 'ALL':
        # Count the number of successful launches per site
        success_counts = filtered_df["Launch Site"].value_counts().reset_index()
        success_counts.columns = ["Launch Site", "Count"]  # Rename columns

        # Create a pie chart displaying absolute counts
        fig = px.pie(data_frame=success_counts, 
                     names="Launch Site",
                     values="Count",
                     title='Total Successful Launches Per Site (Filtered by Payload)',
                     hole=0)

        # Ensure labels display absolute counts, not percentages
        fig.update_traces(textinfo="label+value")

    else:
        # Filter for selected site (without filtering for success)
        site_filtered_df = spacex_df[
            (spacex_df['Launch Site'] == entered_site) &
            (spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
            (spacex_df['Payload Mass (kg)'] <= payload_range[1])
        ]

        # Count successful launches for the selected site
        total_success_count = site_filtered_df['class'].sum()  # Sum of 1s gives success count

        # Create pie chart for success vs failure for the selected site
        fig = px.pie(data_frame=site_filtered_df, 
                     names="class",  
                     title=f'Success vs Failure for {entered_site} (Filtered by Payload)')

    # Return the pie chart and success count text
    return fig, f"Total Successful Launches: {total_success_count}"


# TASK 4: Callback for scatter plot
@app.callback(
    Output(component_id="success-payload-scatter-chart", component_property="figure"),
    Input(component_id="site-dropdown", component_property="value"),
    Input(component_id="payload-slider", component_property="value")
)
def get_scatter_plot(entered_site, payload_range):
    # Filter data based on payload range
    filtered_df = spacex_df[
        (spacex_df['Payload Mass (kg)'] >= payload_range[0]) & 
        (spacex_df['Payload Mass (kg)'] <= payload_range[1])
    ]

    if entered_site == "ALL":
        fig = px.scatter(data_frame=filtered_df,
                         x="Payload Mass (kg)",
                         y="class",
                         color="Booster Version Category",
                         title="Correlation between Payload and Success for All Sites")
    else:
        # Filter for selected site
        filtered_df = filtered_df[filtered_df["Launch Site"] == entered_site]
        
        fig = px.scatter(data_frame=filtered_df,
                         x="Payload Mass (kg)",
                         y="class",
                         color="Booster Version Category",
                         title=f"Correlation between Payload and Success for {entered_site}")

    return fig


# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True, port=8051)
